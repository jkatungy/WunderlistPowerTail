## Physical Computing Studio (48390 s2017) Assignment 02

# To-do List controlled Power Plug

What if your power plug only turned on only if your to-do list was finished? That means, for instance, that you could not watch your favourite TV serries until you cleared your list of daily tasks. Or that a parent could keep their high school child from computer games until the homework was done. Annoying, perhaps, but that's what it sometimes takes to finish off unpleasant tasks. Even better, just when the TV serries gets really interesting or when the computer game gets intense, you could turn off the power just by adding a new task to the list!

## How it works

The device consists of a raspberry pi 3 controlled power tail switch in a special housing. The power cable of the device you wish to control should be connected to the power tail switch such that it draws power through the powertail switch. The power tail switch contains a relay through which a digital signal from a raspberry pi controls the power off/on circuit. The relay separates the 5v signal power from the 110v mains power supply. Effectively, then, the raspberry pi signal controls the power off/on of the powertail and by extension, of whatever is connected to it.

The Power Tail Switch spares you the hustle (and risk) of customizing the ordinary power strip to incorporate a relay. The power tail switch has an inbuilt relay and an LED indicator light to show when it's on or off, which is especially useful as you set up the device.

## The TO-DO list
I chose Wunderlist as the 'to-do list app' because it has [several endpoints](https://developer.wunderlist.com/documentation/endpoints/task) that allow interaction with app through the API. I wanted to monitor the items within the list, every 5 seconds, such that when the number of items became zero, I would signal the power tail switch to turn on. The list items are stored as object arrays. When the length of the array is zero, the list is cleared. This instruction was coded into the javascript file index file which is run whenever the node packet manager (npm) is run within the folder. The [video shows a To Do list controlled fan.](https://youtu.be/Y1xEngtFydA) 

# What you need

1. Raspberry pi 3

![raspberry pi 3](https://cloud.githubusercontent.com/assets/25465148/24256591/f3d87660-0fbe-11e7-8805-3f7cfe53826a.jpg)

2. Powertail switch

![powertailswitch](https://cloud.githubusercontent.com/assets/25465148/24255447/edc45a08-0fbb-11e7-8dc7-aea1863c57dc.jpg)

3. 5v power supply

![5v powerbank](https://cloud.githubusercontent.com/assets/25465148/24256653/19e1cf32-0fbf-11e7-98ca-00d7c08a675f.jpg)

4. Male to Female Jumper wires

![m-f jumperwires](https://cloud.githubusercontent.com/assets/25465148/24256657/1d4cb6a0-0fbf-11e7-937d-e5a945491d41.jpg)

5. Housing

![housing](https://github.com/jkatungy/WunderlistPowerTail/blob/master/Container.jpg?raw=true)

## Code - refer to index.js

## Images

To do list controlled powertail switch - image 1

![To do list controlled fan _ 1](https://github.com/jkatungy/WunderlistPowerTail/blob/master/DigitalControlled_PowerSwitch.JPG?raw=true)

To do list controlled powertail switch - image 2

![To do list controlled fan _ 2](https://github.com/jkatungy/WunderlistPowerTail/blob/master/DigitalControlled_PowerSwitch2.JPG?raw=true)

To do list controlled fan - inside the housing

![To do list controlled fan _ 3](https://github.com/jkatungy/WunderlistPowerTail/blob/master/TodoListControlledFan1.JPG?raw=true)

To do list controlled fan - in operation

![To do list controlled fan _ 4](https://github.com/jkatungy/WunderlistPowerTail/blob/master/TodoListControlledFan2.JPG?raw=true)

